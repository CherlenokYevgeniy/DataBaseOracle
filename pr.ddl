
CREATE TABLE ACTION_MARKING
(
	ACTION_MARKING_ID    CHAR(18) NOT NULL ,
	GAIN_PERCENTAGE      CHAR(18) NULL 
);

CREATE UNIQUE INDEX XPKACTION_MARKING ON ACTION_MARKING
(ACTION_MARKING_ID   ASC);

ALTER TABLE ACTION_MARKING
	ADD CONSTRAINT  XPKACTION_MARKING PRIMARY KEY (ACTION_MARKING_ID);

CREATE TABLE ATTRACTION
(
	ATTRACTION_ID        CHAR(18) NOT NULL ,
	DAILY_GAIN           CHAR(18) NULL 
);

CREATE UNIQUE INDEX XPKATTRACTION ON ATTRACTION
(ATTRACTION_ID   ASC);

ALTER TABLE ATTRACTION
	ADD CONSTRAINT  XPKATTRACTION PRIMARY KEY (ATTRACTION_ID);

CREATE TABLE BANK_LOCATION
(
	BANK_LOCATION_ID     CHAR(18) NOT NULL ,
	NEAR_LOCATION        CHAR(18) NULL ,
	ATTRACTION_ID        CHAR(18) NOT NULL 
);

CREATE UNIQUE INDEX XPKBANK_LOCATION ON BANK_LOCATION
(BANK_LOCATION_ID   ASC,ATTRACTION_ID   ASC);

ALTER TABLE BANK_LOCATION
	ADD CONSTRAINT  XPKBANK_LOCATION PRIMARY KEY (BANK_LOCATION_ID,ATTRACTION_ID);

CREATE TABLE BANK_ROBBERY
(
	BANK_ROBBERY_ID      CHAR(18) NOT NULL ,
	DATE                 CHAR(18) NULL ,
	TIME                 CHAR(18) NULL ,
	GANG_LINEUP_ID       CHAR(18) NOT NULL ,
	STATUS_ID            CHAR(18) NOT NULL ,
	SPECIALIZATION_ID    CHAR(18) NOT NULL ,
	ACTION_MARKING_ID    CHAR(18) NOT NULL ,
	BANKS_ID             CHAR(18) NOT NULL ,
	CITY_ID              CHAR(18) NOT NULL ,
	COUNTRY_ID           CHAR(18) NOT NULL ,
	ATTRACTION_ID        CHAR(18) NOT NULL 
);

CREATE UNIQUE INDEX XPKBANK_ROBBERY ON BANK_ROBBERY
(BANK_ROBBERY_ID   ASC,GANG_LINEUP_ID   ASC,STATUS_ID   ASC,SPECIALIZATION_ID   ASC,ACTION_MARKING_ID   ASC,BANKS_ID   ASC,CITY_ID   ASC,COUNTRY_ID   ASC,ATTRACTION_ID   ASC);

ALTER TABLE BANK_ROBBERY
	ADD CONSTRAINT  XPKBANK_ROBBERY PRIMARY KEY (BANK_ROBBERY_ID,GANG_LINEUP_ID,STATUS_ID,SPECIALIZATION_ID,ACTION_MARKING_ID,BANKS_ID,CITY_ID,COUNTRY_ID,ATTRACTION_ID);

CREATE TABLE COUNTRY
(
	COUNTRY_ID           CHAR(18) NOT NULL ,
	NAME                 CHAR(18) NULL ,
	POPULATION           CHAR(18) NULL 
);

CREATE UNIQUE INDEX XPKCOUNTRY ON COUNTRY
(COUNTRY_ID   ASC);

ALTER TABLE COUNTRY
	ADD CONSTRAINT  XPKCOUNTRY PRIMARY KEY (COUNTRY_ID);

CREATE TABLE CITY
(
	CITY_ID              CHAR(18) NOT NULL ,
	NAME                 CHAR(18) NULL ,
	POPULATION           CHAR(18) NULL ,
	COUNTRY_ID           CHAR(18) NOT NULL 
);

CREATE UNIQUE INDEX XPKCITY ON CITY
(CITY_ID   ASC,COUNTRY_ID   ASC);

ALTER TABLE CITY
	ADD CONSTRAINT  XPKCITY PRIMARY KEY (CITY_ID,COUNTRY_ID);

CREATE TABLE BANKS
(
	BANKS_ID             CHAR(18) NOT NULL ,
	NAME                 CHAR(18) NULL ,
	CITY_ID              CHAR(18) NOT NULL ,
	COUNTRY_ID           CHAR(18) NOT NULL ,
	ATTRACTION_ID        CHAR(18) NOT NULL 
);

CREATE UNIQUE INDEX XPKBANKS ON BANKS
(BANKS_ID   ASC,CITY_ID   ASC,COUNTRY_ID   ASC,ATTRACTION_ID   ASC);

ALTER TABLE BANKS
	ADD CONSTRAINT  XPKBANKS PRIMARY KEY (BANKS_ID,CITY_ID,COUNTRY_ID,ATTRACTION_ID);

CREATE TABLE SPECIALIZATION
(
	SPECIALIZATION_ID    CHAR(18) NOT NULL ,
	SPECIALIZATION_LEVEL CHAR(18) NULL ,
	SKILLS               CHAR(18) NULL ,
	AGE                  CHAR(18) NULL 
);

CREATE UNIQUE INDEX XPKSPECIALIZATION ON SPECIALIZATION
(SPECIALIZATION_ID   ASC);

ALTER TABLE SPECIALIZATION
	ADD CONSTRAINT  XPKSPECIALIZATION PRIMARY KEY (SPECIALIZATION_ID);

CREATE TABLE STATUS
(
	STATUS_ID            CHAR(18) NOT NULL ,
	STATUS_TYPE          CHAR(18) NULL ,
	EXPIERIENCE          CHAR(18) NULL 
);

CREATE UNIQUE INDEX XPKSTATUS ON STATUS
(STATUS_ID   ASC);

ALTER TABLE STATUS
	ADD CONSTRAINT  XPKSTATUS PRIMARY KEY (STATUS_ID);

CREATE TABLE GANG_LINEUP
(
	GANG_LINEUP_ID       CHAR(18) NOT NULL ,
	CONTUCTS             CHAR(18) NULL ,
	MEMBERS_NUMBER       CHAR(18) NULL ,
	STATUS_ID            CHAR(18) NOT NULL ,
	SPECIALIZATION_ID    CHAR(18) NOT NULL 
);

CREATE UNIQUE INDEX XPKGANG_LINEUP ON GANG_LINEUP
(GANG_LINEUP_ID   ASC,STATUS_ID   ASC,SPECIALIZATION_ID   ASC);

ALTER TABLE GANG_LINEUP
	ADD CONSTRAINT  XPKGANG_LINEUP PRIMARY KEY (GANG_LINEUP_ID,STATUS_ID,SPECIALIZATION_ID);

CREATE TABLE GANG_MEMBERS
(
	GANG_MEMBERS_ID      CHAR(18) NOT NULL ,
	NICKNAME             CHAR(18) NULL ,
	AGE                  CHAR(18) NULL ,
	CITY                 CHAR(18) NULL ,
	GANG_LINEUP_ID       CHAR(18) NOT NULL ,
	STATUS_ID            CHAR(18) NOT NULL ,
	SPECIALIZATION_ID    CHAR(18) NOT NULL 
);

CREATE UNIQUE INDEX XPKGANG_MEMBERS ON GANG_MEMBERS
(GANG_MEMBERS_ID   ASC,GANG_LINEUP_ID   ASC,STATUS_ID   ASC,SPECIALIZATION_ID   ASC);

ALTER TABLE GANG_MEMBERS
	ADD CONSTRAINT  XPKGANG_MEMBERS PRIMARY KEY (GANG_MEMBERS_ID,GANG_LINEUP_ID,STATUS_ID,SPECIALIZATION_ID);

CREATE TABLE ROBBERY_RESULT
(
	ROBBERY_RESULT_ID    CHAR(18) NOT NULL ,
	DATE                 CHAR(18) NULL ,
	TIME                 CHAR(18) NULL ,
	BANK_ROBBERY_ID      CHAR(18) NOT NULL ,
	GANG_LINEUP_ID       CHAR(18) NOT NULL ,
	STATUS_ID            CHAR(18) NOT NULL ,
	SPECIALIZATION_ID    CHAR(18) NOT NULL ,
	ACTION_MARKING_ID    CHAR(18) NOT NULL ,
	BANKS_ID             CHAR(18) NOT NULL ,
	CITY_ID              CHAR(18) NOT NULL ,
	COUNTRY_ID           CHAR(18) NOT NULL ,
	ATTRACTION_ID        CHAR(18) NOT NULL 
);

CREATE UNIQUE INDEX XPKROBBERY_RESULT ON ROBBERY_RESULT
(ROBBERY_RESULT_ID   ASC,BANK_ROBBERY_ID   ASC,GANG_LINEUP_ID   ASC,STATUS_ID   ASC,SPECIALIZATION_ID   ASC,ACTION_MARKING_ID   ASC,BANKS_ID   ASC,CITY_ID   ASC,COUNTRY_ID   ASC,ATTRACTION_ID   ASC);

ALTER TABLE ROBBERY_RESULT
	ADD CONSTRAINT  XPKROBBERY_RESULT PRIMARY KEY (ROBBERY_RESULT_ID,BANK_ROBBERY_ID,GANG_LINEUP_ID,STATUS_ID,SPECIALIZATION_ID,ACTION_MARKING_ID,BANKS_ID,CITY_ID,COUNTRY_ID,ATTRACTION_ID);

CREATE TABLE KILLING
(
	KILLING_ID           CHAR(18) NOT NULL ,
	NAME                 CHAR(18) NULL ,
	DATE                 CHAR(18) NULL ,
	ROBBERY_RESULT_ID    CHAR(18) NULL ,
	BANK_ROBBERY_ID      CHAR(18) NULL ,
	GANG_LINEUP_ID       CHAR(18) NULL ,
	STATUS_ID            CHAR(18) NULL ,
	SPECIALIZATION_ID    CHAR(18) NULL ,
	ACTION_MARKING_ID    CHAR(18) NULL ,
	BANKS_ID             CHAR(18) NULL ,
	CITY_ID              CHAR(18) NULL ,
	COUNTRY_ID           CHAR(18) NULL ,
	ATTRACTION_ID        CHAR(18) NULL 
);

CREATE UNIQUE INDEX XPKKILLING ON KILLING
(KILLING_ID   ASC);

ALTER TABLE KILLING
	ADD CONSTRAINT  XPKKILLING PRIMARY KEY (KILLING_ID);

CREATE TABLE SECURITY_LEVEL
(
	SECURITY_LEVEL_ID    CHAR(18) NOT NULL ,
	SECURITIES_NUMBER    CHAR(18) NULL ,
	PROTECTION_LEVEL     CHAR(18) NULL ,
	SECURITY_EQUIPMENT   CHAR(18) NULL ,
	ATTRACTION_ID        CHAR(18) NOT NULL 
);

CREATE UNIQUE INDEX XPKSECURITY_LEVEL ON SECURITY_LEVEL
(SECURITY_LEVEL_ID   ASC,ATTRACTION_ID   ASC);

ALTER TABLE SECURITY_LEVEL
	ADD CONSTRAINT  XPKSECURITY_LEVEL PRIMARY KEY (SECURITY_LEVEL_ID,ATTRACTION_ID);

ALTER TABLE BANK_LOCATION
	ADD (CONSTRAINT R_13 FOREIGN KEY (ATTRACTION_ID) REFERENCES ATTRACTION (ATTRACTION_ID) ON DELETE CASCADE);

ALTER TABLE BANK_ROBBERY
	ADD (CONSTRAINT R_5 FOREIGN KEY (GANG_LINEUP_ID, STATUS_ID, SPECIALIZATION_ID) REFERENCES GANG_LINEUP (GANG_LINEUP_ID, STATUS_ID, SPECIALIZATION_ID));

ALTER TABLE BANK_ROBBERY
	ADD (CONSTRAINT R_6 FOREIGN KEY (ACTION_MARKING_ID) REFERENCES ACTION_MARKING (ACTION_MARKING_ID));

ALTER TABLE BANK_ROBBERY
	ADD (CONSTRAINT R_14 FOREIGN KEY (BANKS_ID, CITY_ID, COUNTRY_ID, ATTRACTION_ID) REFERENCES BANKS (BANKS_ID, CITY_ID, COUNTRY_ID, ATTRACTION_ID));

ALTER TABLE CITY
	ADD (CONSTRAINT R_9 FOREIGN KEY (COUNTRY_ID) REFERENCES COUNTRY (COUNTRY_ID));

ALTER TABLE BANKS
	ADD (CONSTRAINT R_10 FOREIGN KEY (CITY_ID, COUNTRY_ID) REFERENCES CITY (CITY_ID, COUNTRY_ID));

ALTER TABLE BANKS
	ADD (CONSTRAINT R_11 FOREIGN KEY (ATTRACTION_ID) REFERENCES ATTRACTION (ATTRACTION_ID));

ALTER TABLE GANG_LINEUP
	ADD (CONSTRAINT R_2 FOREIGN KEY (STATUS_ID) REFERENCES STATUS (STATUS_ID));

ALTER TABLE GANG_LINEUP
	ADD (CONSTRAINT R_3 FOREIGN KEY (SPECIALIZATION_ID) REFERENCES SPECIALIZATION (SPECIALIZATION_ID));

ALTER TABLE GANG_MEMBERS
	ADD (CONSTRAINT R_4 FOREIGN KEY (GANG_LINEUP_ID, STATUS_ID, SPECIALIZATION_ID) REFERENCES GANG_LINEUP (GANG_LINEUP_ID, STATUS_ID, SPECIALIZATION_ID));

ALTER TABLE ROBBERY_RESULT
	ADD (CONSTRAINT R_7 FOREIGN KEY (BANK_ROBBERY_ID, GANG_LINEUP_ID, STATUS_ID, SPECIALIZATION_ID, ACTION_MARKING_ID, BANKS_ID, CITY_ID, COUNTRY_ID, ATTRACTION_ID) REFERENCES BANK_ROBBERY (BANK_ROBBERY_ID, GANG_LINEUP_ID, STATUS_ID, SPECIALIZATION_ID, ACTION_MARKING_ID, BANKS_ID, CITY_ID, COUNTRY_ID, ATTRACTION_ID));

ALTER TABLE KILLING
	ADD (CONSTRAINT R_8 FOREIGN KEY (ROBBERY_RESULT_ID, BANK_ROBBERY_ID, GANG_LINEUP_ID, STATUS_ID, SPECIALIZATION_ID, ACTION_MARKING_ID, BANKS_ID, CITY_ID, COUNTRY_ID, ATTRACTION_ID) REFERENCES ROBBERY_RESULT (ROBBERY_RESULT_ID, BANK_ROBBERY_ID, GANG_LINEUP_ID, STATUS_ID, SPECIALIZATION_ID, ACTION_MARKING_ID, BANKS_ID, CITY_ID, COUNTRY_ID, ATTRACTION_ID) ON DELETE SET NULL);

ALTER TABLE SECURITY_LEVEL
	ADD (CONSTRAINT R_12 FOREIGN KEY (ATTRACTION_ID) REFERENCES ATTRACTION (ATTRACTION_ID) ON DELETE CASCADE);

CREATE  TRIGGER  tD_ACTION_MARKING AFTER DELETE ON ACTION_MARKING for each row
-- erwin Builtin Trigger
-- DELETE trigger on ACTION_MARKING 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* ACTION_MARKING  BANK_ROBBERY on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0000fbba", PARENT_OWNER="", PARENT_TABLE="ACTION_MARKING"
    CHILD_OWNER="", CHILD_TABLE="BANK_ROBBERY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_6", FK_COLUMNS="ACTION_MARKING_ID" */
    SELECT count(*) INTO NUMROWS
      FROM BANK_ROBBERY
      WHERE
        /*  %JoinFKPK(BANK_ROBBERY,:%Old," = "," AND") */
        BANK_ROBBERY.ACTION_MARKING_ID = :old.ACTION_MARKING_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete ACTION_MARKING because BANK_ROBBERY exists.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_ACTION_MARKING AFTER UPDATE ON ACTION_MARKING for each row
-- erwin Builtin Trigger
-- UPDATE trigger on ACTION_MARKING 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* ACTION_MARKING  BANK_ROBBERY on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000120ec", PARENT_OWNER="", PARENT_TABLE="ACTION_MARKING"
    CHILD_OWNER="", CHILD_TABLE="BANK_ROBBERY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_6", FK_COLUMNS="ACTION_MARKING_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ACTION_MARKING_ID <> :new.ACTION_MARKING_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM BANK_ROBBERY
      WHERE
        /*  %JoinFKPK(BANK_ROBBERY,:%Old," = "," AND") */
        BANK_ROBBERY.ACTION_MARKING_ID = :old.ACTION_MARKING_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update ACTION_MARKING because BANK_ROBBERY exists.'
      );
    END IF;
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_ATTRACTION AFTER DELETE ON ATTRACTION for each row
-- erwin Builtin Trigger
-- DELETE trigger on ATTRACTION 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* ATTRACTION  BANK_LOCATION on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="00025c86", PARENT_OWNER="", PARENT_TABLE="ATTRACTION"
    CHILD_OWNER="", CHILD_TABLE="BANK_LOCATION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_13", FK_COLUMNS="ATTRACTION_ID" */
    DELETE FROM BANK_LOCATION
      WHERE
        /*  %JoinFKPK(BANK_LOCATION,:%Old," = "," AND") */
        BANK_LOCATION.ATTRACTION_ID = :old.ATTRACTION_ID;

    /* erwin Builtin Trigger */
    /* ATTRACTION  SECURITY_LEVEL on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ATTRACTION"
    CHILD_OWNER="", CHILD_TABLE="SECURITY_LEVEL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_12", FK_COLUMNS="ATTRACTION_ID" */
    DELETE FROM SECURITY_LEVEL
      WHERE
        /*  %JoinFKPK(SECURITY_LEVEL,:%Old," = "," AND") */
        SECURITY_LEVEL.ATTRACTION_ID = :old.ATTRACTION_ID;

    /* erwin Builtin Trigger */
    /* ATTRACTION  BANKS on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ATTRACTION"
    CHILD_OWNER="", CHILD_TABLE="BANKS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_11", FK_COLUMNS="ATTRACTION_ID" */
    SELECT count(*) INTO NUMROWS
      FROM BANKS
      WHERE
        /*  %JoinFKPK(BANKS,:%Old," = "," AND") */
        BANKS.ATTRACTION_ID = :old.ATTRACTION_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete ATTRACTION because BANKS exists.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_ATTRACTION AFTER UPDATE ON ATTRACTION for each row
-- erwin Builtin Trigger
-- UPDATE trigger on ATTRACTION 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* ATTRACTION  BANK_LOCATION on parent update cascade */
  /* ERWIN_RELATION:CHECKSUM="00034267", PARENT_OWNER="", PARENT_TABLE="ATTRACTION"
    CHILD_OWNER="", CHILD_TABLE="BANK_LOCATION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_13", FK_COLUMNS="ATTRACTION_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ATTRACTION_ID <> :new.ATTRACTION_ID
  THEN
    UPDATE BANK_LOCATION
      SET
        /*  %JoinFKPK(BANK_LOCATION,:%New," = ",",") */
        BANK_LOCATION.ATTRACTION_ID = :new.ATTRACTION_ID
      WHERE
        /*  %JoinFKPK(BANK_LOCATION,:%Old," = "," AND") */
        BANK_LOCATION.ATTRACTION_ID = :old.ATTRACTION_ID;
  END IF;

  /* erwin Builtin Trigger */
  /* ATTRACTION  SECURITY_LEVEL on parent update cascade */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ATTRACTION"
    CHILD_OWNER="", CHILD_TABLE="SECURITY_LEVEL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_12", FK_COLUMNS="ATTRACTION_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ATTRACTION_ID <> :new.ATTRACTION_ID
  THEN
    UPDATE SECURITY_LEVEL
      SET
        /*  %JoinFKPK(SECURITY_LEVEL,:%New," = ",",") */
        SECURITY_LEVEL.ATTRACTION_ID = :new.ATTRACTION_ID
      WHERE
        /*  %JoinFKPK(SECURITY_LEVEL,:%Old," = "," AND") */
        SECURITY_LEVEL.ATTRACTION_ID = :old.ATTRACTION_ID;
  END IF;

  /* erwin Builtin Trigger */
  /* ATTRACTION  BANKS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ATTRACTION"
    CHILD_OWNER="", CHILD_TABLE="BANKS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_11", FK_COLUMNS="ATTRACTION_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ATTRACTION_ID <> :new.ATTRACTION_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM BANKS
      WHERE
        /*  %JoinFKPK(BANKS,:%Old," = "," AND") */
        BANKS.ATTRACTION_ID = :old.ATTRACTION_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update ATTRACTION because BANKS exists.'
      );
    END IF;
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_BANK_LOCATION BEFORE INSERT ON BANK_LOCATION for each row
-- erwin Builtin Trigger
-- INSERT trigger on BANK_LOCATION 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* ATTRACTION  BANK_LOCATION on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0000e7f4", PARENT_OWNER="", PARENT_TABLE="ATTRACTION"
    CHILD_OWNER="", CHILD_TABLE="BANK_LOCATION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_13", FK_COLUMNS="ATTRACTION_ID" */
    SELECT count(*) INTO NUMROWS
      FROM ATTRACTION
      WHERE
        /* %JoinFKPK(:%New,ATTRACTION," = "," AND") */
        :new.ATTRACTION_ID = ATTRACTION.ATTRACTION_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert BANK_LOCATION because ATTRACTION does not exist.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_BANK_LOCATION AFTER UPDATE ON BANK_LOCATION for each row
-- erwin Builtin Trigger
-- UPDATE trigger on BANK_LOCATION 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* ATTRACTION  BANK_LOCATION on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="0000eb21", PARENT_OWNER="", PARENT_TABLE="ATTRACTION"
    CHILD_OWNER="", CHILD_TABLE="BANK_LOCATION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_13", FK_COLUMNS="ATTRACTION_ID" */
  SELECT count(*) INTO NUMROWS
    FROM ATTRACTION
    WHERE
      /* %JoinFKPK(:%New,ATTRACTION," = "," AND") */
      :new.ATTRACTION_ID = ATTRACTION.ATTRACTION_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update BANK_LOCATION because ATTRACTION does not exist.'
    );
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_BANK_ROBBERY AFTER DELETE ON BANK_ROBBERY for each row
-- erwin Builtin Trigger
-- DELETE trigger on BANK_ROBBERY 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* BANK_ROBBERY  ROBBERY_RESULT on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0001e76f", PARENT_OWNER="", PARENT_TABLE="BANK_ROBBERY"
    CHILD_OWNER="", CHILD_TABLE="ROBBERY_RESULT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_7", FK_COLUMNS="BANK_ROBBERY_ID""GANG_LINEUP_ID""STATUS_ID""SPECIALIZATION_ID""
              ACTION_MARKING_ID""BANKS_ID""CITY_ID""COUNTRY_ID""
              ATTRACTION_ID" */
    SELECT count(*) INTO NUMROWS
      FROM ROBBERY_RESULT
      WHERE
        /*  %JoinFKPK(ROBBERY_RESULT,:%Old," = "," AND") */
        ROBBERY_RESULT.BANK_ROBBERY_ID = :old.BANK_ROBBERY_ID AND
        ROBBERY_RESULT.GANG_LINEUP_ID = :old.GANG_LINEUP_ID AND
        ROBBERY_RESULT.STATUS_ID = :old.STATUS_ID AND
        ROBBERY_RESULT.SPECIALIZATION_ID = :old.SPECIALIZATION_ID AND
        ROBBERY_RESULT.ACTION_MARKING_ID = :old.ACTION_MARKING_ID AND
        ROBBERY_RESULT.BANKS_ID = :old.BANKS_ID AND
        ROBBERY_RESULT.CITY_ID = :old.CITY_ID AND
        ROBBERY_RESULT.COUNTRY_ID = :old.COUNTRY_ID AND
        ROBBERY_RESULT.ATTRACTION_ID = :old.ATTRACTION_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete BANK_ROBBERY because ROBBERY_RESULT exists.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tI_BANK_ROBBERY BEFORE INSERT ON BANK_ROBBERY for each row
-- erwin Builtin Trigger
-- INSERT trigger on BANK_ROBBERY 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* BANKS  BANK_ROBBERY on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0003b640", PARENT_OWNER="", PARENT_TABLE="BANKS"
    CHILD_OWNER="", CHILD_TABLE="BANK_ROBBERY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_14", FK_COLUMNS="BANKS_ID""CITY_ID""COUNTRY_ID""ATTRACTION_ID" */
    SELECT count(*) INTO NUMROWS
      FROM BANKS
      WHERE
        /* %JoinFKPK(:%New,BANKS," = "," AND") */
        :new.BANKS_ID = BANKS.BANKS_ID AND
        :new.CITY_ID = BANKS.CITY_ID AND
        :new.COUNTRY_ID = BANKS.COUNTRY_ID AND
        :new.ATTRACTION_ID = BANKS.ATTRACTION_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert BANK_ROBBERY because BANKS does not exist.'
      );
    END IF;

    /* erwin Builtin Trigger */
    /* ACTION_MARKING  BANK_ROBBERY on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ACTION_MARKING"
    CHILD_OWNER="", CHILD_TABLE="BANK_ROBBERY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_6", FK_COLUMNS="ACTION_MARKING_ID" */
    SELECT count(*) INTO NUMROWS
      FROM ACTION_MARKING
      WHERE
        /* %JoinFKPK(:%New,ACTION_MARKING," = "," AND") */
        :new.ACTION_MARKING_ID = ACTION_MARKING.ACTION_MARKING_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert BANK_ROBBERY because ACTION_MARKING does not exist.'
      );
    END IF;

    /* erwin Builtin Trigger */
    /* GANG_LINEUP  BANK_ROBBERY on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="GANG_LINEUP"
    CHILD_OWNER="", CHILD_TABLE="BANK_ROBBERY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_5", FK_COLUMNS="GANG_LINEUP_ID""STATUS_ID""SPECIALIZATION_ID" */
    SELECT count(*) INTO NUMROWS
      FROM GANG_LINEUP
      WHERE
        /* %JoinFKPK(:%New,GANG_LINEUP," = "," AND") */
        :new.GANG_LINEUP_ID = GANG_LINEUP.GANG_LINEUP_ID AND
        :new.STATUS_ID = GANG_LINEUP.STATUS_ID AND
        :new.SPECIALIZATION_ID = GANG_LINEUP.SPECIALIZATION_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert BANK_ROBBERY because GANG_LINEUP does not exist.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_BANK_ROBBERY AFTER UPDATE ON BANK_ROBBERY for each row
-- erwin Builtin Trigger
-- UPDATE trigger on BANK_ROBBERY 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* BANK_ROBBERY  ROBBERY_RESULT on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00066c5b", PARENT_OWNER="", PARENT_TABLE="BANK_ROBBERY"
    CHILD_OWNER="", CHILD_TABLE="ROBBERY_RESULT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_7", FK_COLUMNS="BANK_ROBBERY_ID""GANG_LINEUP_ID""STATUS_ID""SPECIALIZATION_ID""
              ACTION_MARKING_ID""BANKS_ID""CITY_ID""COUNTRY_ID""
              ATTRACTION_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.BANK_ROBBERY_ID <> :new.BANK_ROBBERY_ID OR 
    :old.GANG_LINEUP_ID <> :new.GANG_LINEUP_ID OR 
    :old.STATUS_ID <> :new.STATUS_ID OR 
    :old.SPECIALIZATION_ID <> :new.SPECIALIZATION_ID OR 
    :old.ACTION_MARKING_ID <> :new.ACTION_MARKING_ID OR 
    :old.BANKS_ID <> :new.BANKS_ID OR 
    :old.CITY_ID <> :new.CITY_ID OR 
    :old.COUNTRY_ID <> :new.COUNTRY_ID OR 
    :old.ATTRACTION_ID <> :new.ATTRACTION_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM ROBBERY_RESULT
      WHERE
        /*  %JoinFKPK(ROBBERY_RESULT,:%Old," = "," AND") */
        ROBBERY_RESULT.BANK_ROBBERY_ID = :old.BANK_ROBBERY_ID AND
        ROBBERY_RESULT.GANG_LINEUP_ID = :old.GANG_LINEUP_ID AND
        ROBBERY_RESULT.STATUS_ID = :old.STATUS_ID AND
        ROBBERY_RESULT.SPECIALIZATION_ID = :old.SPECIALIZATION_ID AND
        ROBBERY_RESULT.ACTION_MARKING_ID = :old.ACTION_MARKING_ID AND
        ROBBERY_RESULT.BANKS_ID = :old.BANKS_ID AND
        ROBBERY_RESULT.CITY_ID = :old.CITY_ID AND
        ROBBERY_RESULT.COUNTRY_ID = :old.COUNTRY_ID AND
        ROBBERY_RESULT.ATTRACTION_ID = :old.ATTRACTION_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update BANK_ROBBERY because ROBBERY_RESULT exists.'
      );
    END IF;
  END IF;

  /* erwin Builtin Trigger */
  /* BANKS  BANK_ROBBERY on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BANKS"
    CHILD_OWNER="", CHILD_TABLE="BANK_ROBBERY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_14", FK_COLUMNS="BANKS_ID""CITY_ID""COUNTRY_ID""ATTRACTION_ID" */
  SELECT count(*) INTO NUMROWS
    FROM BANKS
    WHERE
      /* %JoinFKPK(:%New,BANKS," = "," AND") */
      :new.BANKS_ID = BANKS.BANKS_ID AND
      :new.CITY_ID = BANKS.CITY_ID AND
      :new.COUNTRY_ID = BANKS.COUNTRY_ID AND
      :new.ATTRACTION_ID = BANKS.ATTRACTION_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update BANK_ROBBERY because BANKS does not exist.'
    );
  END IF;

  /* erwin Builtin Trigger */
  /* ACTION_MARKING  BANK_ROBBERY on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ACTION_MARKING"
    CHILD_OWNER="", CHILD_TABLE="BANK_ROBBERY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_6", FK_COLUMNS="ACTION_MARKING_ID" */
  SELECT count(*) INTO NUMROWS
    FROM ACTION_MARKING
    WHERE
      /* %JoinFKPK(:%New,ACTION_MARKING," = "," AND") */
      :new.ACTION_MARKING_ID = ACTION_MARKING.ACTION_MARKING_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update BANK_ROBBERY because ACTION_MARKING does not exist.'
    );
  END IF;

  /* erwin Builtin Trigger */
  /* GANG_LINEUP  BANK_ROBBERY on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="GANG_LINEUP"
    CHILD_OWNER="", CHILD_TABLE="BANK_ROBBERY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_5", FK_COLUMNS="GANG_LINEUP_ID""STATUS_ID""SPECIALIZATION_ID" */
  SELECT count(*) INTO NUMROWS
    FROM GANG_LINEUP
    WHERE
      /* %JoinFKPK(:%New,GANG_LINEUP," = "," AND") */
      :new.GANG_LINEUP_ID = GANG_LINEUP.GANG_LINEUP_ID AND
      :new.STATUS_ID = GANG_LINEUP.STATUS_ID AND
      :new.SPECIALIZATION_ID = GANG_LINEUP.SPECIALIZATION_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update BANK_ROBBERY because GANG_LINEUP does not exist.'
    );
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_COUNTRY AFTER DELETE ON COUNTRY for each row
-- erwin Builtin Trigger
-- DELETE trigger on COUNTRY 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* COUNTRY  CITY on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0000caa8", PARENT_OWNER="", PARENT_TABLE="COUNTRY"
    CHILD_OWNER="", CHILD_TABLE="CITY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_9", FK_COLUMNS="COUNTRY_ID" */
    SELECT count(*) INTO NUMROWS
      FROM CITY
      WHERE
        /*  %JoinFKPK(CITY,:%Old," = "," AND") */
        CITY.COUNTRY_ID = :old.COUNTRY_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete COUNTRY because CITY exists.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_COUNTRY AFTER UPDATE ON COUNTRY for each row
-- erwin Builtin Trigger
-- UPDATE trigger on COUNTRY 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* COUNTRY  CITY on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0000f792", PARENT_OWNER="", PARENT_TABLE="COUNTRY"
    CHILD_OWNER="", CHILD_TABLE="CITY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_9", FK_COLUMNS="COUNTRY_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.COUNTRY_ID <> :new.COUNTRY_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM CITY
      WHERE
        /*  %JoinFKPK(CITY,:%Old," = "," AND") */
        CITY.COUNTRY_ID = :old.COUNTRY_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update COUNTRY because CITY exists.'
      );
    END IF;
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_CITY AFTER DELETE ON CITY for each row
-- erwin Builtin Trigger
-- DELETE trigger on CITY 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* CITY  BANKS on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0000e4d7", PARENT_OWNER="", PARENT_TABLE="CITY"
    CHILD_OWNER="", CHILD_TABLE="BANKS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_10", FK_COLUMNS="CITY_ID""COUNTRY_ID" */
    SELECT count(*) INTO NUMROWS
      FROM BANKS
      WHERE
        /*  %JoinFKPK(BANKS,:%Old," = "," AND") */
        BANKS.CITY_ID = :old.CITY_ID AND
        BANKS.COUNTRY_ID = :old.COUNTRY_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete CITY because BANKS exists.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tI_CITY BEFORE INSERT ON CITY for each row
-- erwin Builtin Trigger
-- INSERT trigger on CITY 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* COUNTRY  CITY on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0000e649", PARENT_OWNER="", PARENT_TABLE="COUNTRY"
    CHILD_OWNER="", CHILD_TABLE="CITY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_9", FK_COLUMNS="COUNTRY_ID" */
    SELECT count(*) INTO NUMROWS
      FROM COUNTRY
      WHERE
        /* %JoinFKPK(:%New,COUNTRY," = "," AND") */
        :new.COUNTRY_ID = COUNTRY.COUNTRY_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert CITY because COUNTRY does not exist.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_CITY AFTER UPDATE ON CITY for each row
-- erwin Builtin Trigger
-- UPDATE trigger on CITY 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* CITY  BANKS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00021ac1", PARENT_OWNER="", PARENT_TABLE="CITY"
    CHILD_OWNER="", CHILD_TABLE="BANKS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_10", FK_COLUMNS="CITY_ID""COUNTRY_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.CITY_ID <> :new.CITY_ID OR 
    :old.COUNTRY_ID <> :new.COUNTRY_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM BANKS
      WHERE
        /*  %JoinFKPK(BANKS,:%Old," = "," AND") */
        BANKS.CITY_ID = :old.CITY_ID AND
        BANKS.COUNTRY_ID = :old.COUNTRY_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update CITY because BANKS exists.'
      );
    END IF;
  END IF;

  /* erwin Builtin Trigger */
  /* COUNTRY  CITY on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="COUNTRY"
    CHILD_OWNER="", CHILD_TABLE="CITY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_9", FK_COLUMNS="COUNTRY_ID" */
  SELECT count(*) INTO NUMROWS
    FROM COUNTRY
    WHERE
      /* %JoinFKPK(:%New,COUNTRY," = "," AND") */
      :new.COUNTRY_ID = COUNTRY.COUNTRY_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update CITY because COUNTRY does not exist.'
    );
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_BANKS AFTER DELETE ON BANKS for each row
-- erwin Builtin Trigger
-- DELETE trigger on BANKS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* BANKS  BANK_ROBBERY on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00012bac", PARENT_OWNER="", PARENT_TABLE="BANKS"
    CHILD_OWNER="", CHILD_TABLE="BANK_ROBBERY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_14", FK_COLUMNS="BANKS_ID""CITY_ID""COUNTRY_ID""ATTRACTION_ID" */
    SELECT count(*) INTO NUMROWS
      FROM BANK_ROBBERY
      WHERE
        /*  %JoinFKPK(BANK_ROBBERY,:%Old," = "," AND") */
        BANK_ROBBERY.BANKS_ID = :old.BANKS_ID AND
        BANK_ROBBERY.CITY_ID = :old.CITY_ID AND
        BANK_ROBBERY.COUNTRY_ID = :old.COUNTRY_ID AND
        BANK_ROBBERY.ATTRACTION_ID = :old.ATTRACTION_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete BANKS because BANK_ROBBERY exists.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tI_BANKS BEFORE INSERT ON BANKS for each row
-- erwin Builtin Trigger
-- INSERT trigger on BANKS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* ATTRACTION  BANKS on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0001fdb0", PARENT_OWNER="", PARENT_TABLE="ATTRACTION"
    CHILD_OWNER="", CHILD_TABLE="BANKS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_11", FK_COLUMNS="ATTRACTION_ID" */
    SELECT count(*) INTO NUMROWS
      FROM ATTRACTION
      WHERE
        /* %JoinFKPK(:%New,ATTRACTION," = "," AND") */
        :new.ATTRACTION_ID = ATTRACTION.ATTRACTION_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert BANKS because ATTRACTION does not exist.'
      );
    END IF;

    /* erwin Builtin Trigger */
    /* CITY  BANKS on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CITY"
    CHILD_OWNER="", CHILD_TABLE="BANKS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_10", FK_COLUMNS="CITY_ID""COUNTRY_ID" */
    SELECT count(*) INTO NUMROWS
      FROM CITY
      WHERE
        /* %JoinFKPK(:%New,CITY," = "," AND") */
        :new.CITY_ID = CITY.CITY_ID AND
        :new.COUNTRY_ID = CITY.COUNTRY_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert BANKS because CITY does not exist.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_BANKS AFTER UPDATE ON BANKS for each row
-- erwin Builtin Trigger
-- UPDATE trigger on BANKS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* BANKS  BANK_ROBBERY on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0003924b", PARENT_OWNER="", PARENT_TABLE="BANKS"
    CHILD_OWNER="", CHILD_TABLE="BANK_ROBBERY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_14", FK_COLUMNS="BANKS_ID""CITY_ID""COUNTRY_ID""ATTRACTION_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.BANKS_ID <> :new.BANKS_ID OR 
    :old.CITY_ID <> :new.CITY_ID OR 
    :old.COUNTRY_ID <> :new.COUNTRY_ID OR 
    :old.ATTRACTION_ID <> :new.ATTRACTION_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM BANK_ROBBERY
      WHERE
        /*  %JoinFKPK(BANK_ROBBERY,:%Old," = "," AND") */
        BANK_ROBBERY.BANKS_ID = :old.BANKS_ID AND
        BANK_ROBBERY.CITY_ID = :old.CITY_ID AND
        BANK_ROBBERY.COUNTRY_ID = :old.COUNTRY_ID AND
        BANK_ROBBERY.ATTRACTION_ID = :old.ATTRACTION_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update BANKS because BANK_ROBBERY exists.'
      );
    END IF;
  END IF;

  /* erwin Builtin Trigger */
  /* ATTRACTION  BANKS on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ATTRACTION"
    CHILD_OWNER="", CHILD_TABLE="BANKS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_11", FK_COLUMNS="ATTRACTION_ID" */
  SELECT count(*) INTO NUMROWS
    FROM ATTRACTION
    WHERE
      /* %JoinFKPK(:%New,ATTRACTION," = "," AND") */
      :new.ATTRACTION_ID = ATTRACTION.ATTRACTION_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update BANKS because ATTRACTION does not exist.'
    );
  END IF;

  /* erwin Builtin Trigger */
  /* CITY  BANKS on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CITY"
    CHILD_OWNER="", CHILD_TABLE="BANKS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_10", FK_COLUMNS="CITY_ID""COUNTRY_ID" */
  SELECT count(*) INTO NUMROWS
    FROM CITY
    WHERE
      /* %JoinFKPK(:%New,CITY," = "," AND") */
      :new.CITY_ID = CITY.CITY_ID AND
      :new.COUNTRY_ID = CITY.COUNTRY_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update BANKS because CITY does not exist.'
    );
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_SPECIALIZATION AFTER DELETE ON SPECIALIZATION for each row
-- erwin Builtin Trigger
-- DELETE trigger on SPECIALIZATION 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* SPECIALIZATION  GANG_LINEUP on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0000e217", PARENT_OWNER="", PARENT_TABLE="SPECIALIZATION"
    CHILD_OWNER="", CHILD_TABLE="GANG_LINEUP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_3", FK_COLUMNS="SPECIALIZATION_ID" */
    SELECT count(*) INTO NUMROWS
      FROM GANG_LINEUP
      WHERE
        /*  %JoinFKPK(GANG_LINEUP,:%Old," = "," AND") */
        GANG_LINEUP.SPECIALIZATION_ID = :old.SPECIALIZATION_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete SPECIALIZATION because GANG_LINEUP exists.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SPECIALIZATION AFTER UPDATE ON SPECIALIZATION for each row
-- erwin Builtin Trigger
-- UPDATE trigger on SPECIALIZATION 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* SPECIALIZATION  GANG_LINEUP on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00011be1", PARENT_OWNER="", PARENT_TABLE="SPECIALIZATION"
    CHILD_OWNER="", CHILD_TABLE="GANG_LINEUP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_3", FK_COLUMNS="SPECIALIZATION_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.SPECIALIZATION_ID <> :new.SPECIALIZATION_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM GANG_LINEUP
      WHERE
        /*  %JoinFKPK(GANG_LINEUP,:%Old," = "," AND") */
        GANG_LINEUP.SPECIALIZATION_ID = :old.SPECIALIZATION_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update SPECIALIZATION because GANG_LINEUP exists.'
      );
    END IF;
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_STATUS AFTER DELETE ON STATUS for each row
-- erwin Builtin Trigger
-- DELETE trigger on STATUS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* STATUS  GANG_LINEUP on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0000dc80", PARENT_OWNER="", PARENT_TABLE="STATUS"
    CHILD_OWNER="", CHILD_TABLE="GANG_LINEUP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2", FK_COLUMNS="STATUS_ID" */
    SELECT count(*) INTO NUMROWS
      FROM GANG_LINEUP
      WHERE
        /*  %JoinFKPK(GANG_LINEUP,:%Old," = "," AND") */
        GANG_LINEUP.STATUS_ID = :old.STATUS_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete STATUS because GANG_LINEUP exists.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_STATUS AFTER UPDATE ON STATUS for each row
-- erwin Builtin Trigger
-- UPDATE trigger on STATUS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* STATUS  GANG_LINEUP on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000104d4", PARENT_OWNER="", PARENT_TABLE="STATUS"
    CHILD_OWNER="", CHILD_TABLE="GANG_LINEUP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2", FK_COLUMNS="STATUS_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.STATUS_ID <> :new.STATUS_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM GANG_LINEUP
      WHERE
        /*  %JoinFKPK(GANG_LINEUP,:%Old," = "," AND") */
        GANG_LINEUP.STATUS_ID = :old.STATUS_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update STATUS because GANG_LINEUP exists.'
      );
    END IF;
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_GANG_LINEUP AFTER DELETE ON GANG_LINEUP for each row
-- erwin Builtin Trigger
-- DELETE trigger on GANG_LINEUP 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* GANG_LINEUP  BANK_ROBBERY on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="000265ce", PARENT_OWNER="", PARENT_TABLE="GANG_LINEUP"
    CHILD_OWNER="", CHILD_TABLE="BANK_ROBBERY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_5", FK_COLUMNS="GANG_LINEUP_ID""STATUS_ID""SPECIALIZATION_ID" */
    SELECT count(*) INTO NUMROWS
      FROM BANK_ROBBERY
      WHERE
        /*  %JoinFKPK(BANK_ROBBERY,:%Old," = "," AND") */
        BANK_ROBBERY.GANG_LINEUP_ID = :old.GANG_LINEUP_ID AND
        BANK_ROBBERY.STATUS_ID = :old.STATUS_ID AND
        BANK_ROBBERY.SPECIALIZATION_ID = :old.SPECIALIZATION_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete GANG_LINEUP because BANK_ROBBERY exists.'
      );
    END IF;

    /* erwin Builtin Trigger */
    /* GANG_LINEUP  GANG_MEMBERS on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="GANG_LINEUP"
    CHILD_OWNER="", CHILD_TABLE="GANG_MEMBERS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_4", FK_COLUMNS="GANG_LINEUP_ID""STATUS_ID""SPECIALIZATION_ID" */
    SELECT count(*) INTO NUMROWS
      FROM GANG_MEMBERS
      WHERE
        /*  %JoinFKPK(GANG_MEMBERS,:%Old," = "," AND") */
        GANG_MEMBERS.GANG_LINEUP_ID = :old.GANG_LINEUP_ID AND
        GANG_MEMBERS.STATUS_ID = :old.STATUS_ID AND
        GANG_MEMBERS.SPECIALIZATION_ID = :old.SPECIALIZATION_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete GANG_LINEUP because GANG_MEMBERS exists.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tI_GANG_LINEUP BEFORE INSERT ON GANG_LINEUP for each row
-- erwin Builtin Trigger
-- INSERT trigger on GANG_LINEUP 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* SPECIALIZATION  GANG_LINEUP on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00021017", PARENT_OWNER="", PARENT_TABLE="SPECIALIZATION"
    CHILD_OWNER="", CHILD_TABLE="GANG_LINEUP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_3", FK_COLUMNS="SPECIALIZATION_ID" */
    SELECT count(*) INTO NUMROWS
      FROM SPECIALIZATION
      WHERE
        /* %JoinFKPK(:%New,SPECIALIZATION," = "," AND") */
        :new.SPECIALIZATION_ID = SPECIALIZATION.SPECIALIZATION_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert GANG_LINEUP because SPECIALIZATION does not exist.'
      );
    END IF;

    /* erwin Builtin Trigger */
    /* STATUS  GANG_LINEUP on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="STATUS"
    CHILD_OWNER="", CHILD_TABLE="GANG_LINEUP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2", FK_COLUMNS="STATUS_ID" */
    SELECT count(*) INTO NUMROWS
      FROM STATUS
      WHERE
        /* %JoinFKPK(:%New,STATUS," = "," AND") */
        :new.STATUS_ID = STATUS.STATUS_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert GANG_LINEUP because STATUS does not exist.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_GANG_LINEUP AFTER UPDATE ON GANG_LINEUP for each row
-- erwin Builtin Trigger
-- UPDATE trigger on GANG_LINEUP 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* GANG_LINEUP  BANK_ROBBERY on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000535e7", PARENT_OWNER="", PARENT_TABLE="GANG_LINEUP"
    CHILD_OWNER="", CHILD_TABLE="BANK_ROBBERY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_5", FK_COLUMNS="GANG_LINEUP_ID""STATUS_ID""SPECIALIZATION_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.GANG_LINEUP_ID <> :new.GANG_LINEUP_ID OR 
    :old.STATUS_ID <> :new.STATUS_ID OR 
    :old.SPECIALIZATION_ID <> :new.SPECIALIZATION_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM BANK_ROBBERY
      WHERE
        /*  %JoinFKPK(BANK_ROBBERY,:%Old," = "," AND") */
        BANK_ROBBERY.GANG_LINEUP_ID = :old.GANG_LINEUP_ID AND
        BANK_ROBBERY.STATUS_ID = :old.STATUS_ID AND
        BANK_ROBBERY.SPECIALIZATION_ID = :old.SPECIALIZATION_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update GANG_LINEUP because BANK_ROBBERY exists.'
      );
    END IF;
  END IF;

  /* erwin Builtin Trigger */
  /* GANG_LINEUP  GANG_MEMBERS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="GANG_LINEUP"
    CHILD_OWNER="", CHILD_TABLE="GANG_MEMBERS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_4", FK_COLUMNS="GANG_LINEUP_ID""STATUS_ID""SPECIALIZATION_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.GANG_LINEUP_ID <> :new.GANG_LINEUP_ID OR 
    :old.STATUS_ID <> :new.STATUS_ID OR 
    :old.SPECIALIZATION_ID <> :new.SPECIALIZATION_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM GANG_MEMBERS
      WHERE
        /*  %JoinFKPK(GANG_MEMBERS,:%Old," = "," AND") */
        GANG_MEMBERS.GANG_LINEUP_ID = :old.GANG_LINEUP_ID AND
        GANG_MEMBERS.STATUS_ID = :old.STATUS_ID AND
        GANG_MEMBERS.SPECIALIZATION_ID = :old.SPECIALIZATION_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update GANG_LINEUP because GANG_MEMBERS exists.'
      );
    END IF;
  END IF;

  /* erwin Builtin Trigger */
  /* SPECIALIZATION  GANG_LINEUP on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SPECIALIZATION"
    CHILD_OWNER="", CHILD_TABLE="GANG_LINEUP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_3", FK_COLUMNS="SPECIALIZATION_ID" */
  SELECT count(*) INTO NUMROWS
    FROM SPECIALIZATION
    WHERE
      /* %JoinFKPK(:%New,SPECIALIZATION," = "," AND") */
      :new.SPECIALIZATION_ID = SPECIALIZATION.SPECIALIZATION_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update GANG_LINEUP because SPECIALIZATION does not exist.'
    );
  END IF;

  /* erwin Builtin Trigger */
  /* STATUS  GANG_LINEUP on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="STATUS"
    CHILD_OWNER="", CHILD_TABLE="GANG_LINEUP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2", FK_COLUMNS="STATUS_ID" */
  SELECT count(*) INTO NUMROWS
    FROM STATUS
    WHERE
      /* %JoinFKPK(:%New,STATUS," = "," AND") */
      :new.STATUS_ID = STATUS.STATUS_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update GANG_LINEUP because STATUS does not exist.'
    );
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_GANG_MEMBERS BEFORE INSERT ON GANG_MEMBERS for each row
-- erwin Builtin Trigger
-- INSERT trigger on GANG_MEMBERS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* GANG_LINEUP  GANG_MEMBERS on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00013afd", PARENT_OWNER="", PARENT_TABLE="GANG_LINEUP"
    CHILD_OWNER="", CHILD_TABLE="GANG_MEMBERS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_4", FK_COLUMNS="GANG_LINEUP_ID""STATUS_ID""SPECIALIZATION_ID" */
    SELECT count(*) INTO NUMROWS
      FROM GANG_LINEUP
      WHERE
        /* %JoinFKPK(:%New,GANG_LINEUP," = "," AND") */
        :new.GANG_LINEUP_ID = GANG_LINEUP.GANG_LINEUP_ID AND
        :new.STATUS_ID = GANG_LINEUP.STATUS_ID AND
        :new.SPECIALIZATION_ID = GANG_LINEUP.SPECIALIZATION_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert GANG_MEMBERS because GANG_LINEUP does not exist.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_GANG_MEMBERS AFTER UPDATE ON GANG_MEMBERS for each row
-- erwin Builtin Trigger
-- UPDATE trigger on GANG_MEMBERS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* GANG_LINEUP  GANG_MEMBERS on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00013ac3", PARENT_OWNER="", PARENT_TABLE="GANG_LINEUP"
    CHILD_OWNER="", CHILD_TABLE="GANG_MEMBERS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_4", FK_COLUMNS="GANG_LINEUP_ID""STATUS_ID""SPECIALIZATION_ID" */
  SELECT count(*) INTO NUMROWS
    FROM GANG_LINEUP
    WHERE
      /* %JoinFKPK(:%New,GANG_LINEUP," = "," AND") */
      :new.GANG_LINEUP_ID = GANG_LINEUP.GANG_LINEUP_ID AND
      :new.STATUS_ID = GANG_LINEUP.STATUS_ID AND
      :new.SPECIALIZATION_ID = GANG_LINEUP.SPECIALIZATION_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update GANG_MEMBERS because GANG_LINEUP does not exist.'
    );
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_ROBBERY_RESULT AFTER DELETE ON ROBBERY_RESULT for each row
-- erwin Builtin Trigger
-- DELETE trigger on ROBBERY_RESULT 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* ROBBERY_RESULT  KILLING on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="000232cf", PARENT_OWNER="", PARENT_TABLE="ROBBERY_RESULT"
    CHILD_OWNER="", CHILD_TABLE="KILLING"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_8", FK_COLUMNS="ROBBERY_RESULT_ID""BANK_ROBBERY_ID""GANG_LINEUP_ID""STATUS_ID""
              SPECIALIZATION_ID""ACTION_MARKING_ID""BANKS_ID""CITY_ID""
              COUNTRY_ID""ATTRACTION_ID" */
    UPDATE KILLING
      SET
        /* %SetFK(KILLING,NULL) */
        KILLING.ROBBERY_RESULT_ID = NULL,
        KILLING.BANK_ROBBERY_ID = NULL,
        KILLING.GANG_LINEUP_ID = NULL,
        KILLING.STATUS_ID = NULL,
        KILLING.SPECIALIZATION_ID = NULL,
        KILLING.ACTION_MARKING_ID = NULL,
        KILLING.BANKS_ID = NULL,
        KILLING.CITY_ID = NULL,
        KILLING.COUNTRY_ID = NULL,
        KILLING.ATTRACTION_ID = NULL
      WHERE
        /* %JoinFKPK(KILLING,:%Old," = "," AND") */
        KILLING.ROBBERY_RESULT_ID = :old.ROBBERY_RESULT_ID AND
        KILLING.BANK_ROBBERY_ID = :old.BANK_ROBBERY_ID AND
        KILLING.GANG_LINEUP_ID = :old.GANG_LINEUP_ID AND
        KILLING.STATUS_ID = :old.STATUS_ID AND
        KILLING.SPECIALIZATION_ID = :old.SPECIALIZATION_ID AND
        KILLING.ACTION_MARKING_ID = :old.ACTION_MARKING_ID AND
        KILLING.BANKS_ID = :old.BANKS_ID AND
        KILLING.CITY_ID = :old.CITY_ID AND
        KILLING.COUNTRY_ID = :old.COUNTRY_ID AND
        KILLING.ATTRACTION_ID = :old.ATTRACTION_ID;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tI_ROBBERY_RESULT BEFORE INSERT ON ROBBERY_RESULT for each row
-- erwin Builtin Trigger
-- INSERT trigger on ROBBERY_RESULT 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* BANK_ROBBERY  ROBBERY_RESULT on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0001efe0", PARENT_OWNER="", PARENT_TABLE="BANK_ROBBERY"
    CHILD_OWNER="", CHILD_TABLE="ROBBERY_RESULT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_7", FK_COLUMNS="BANK_ROBBERY_ID""GANG_LINEUP_ID""STATUS_ID""SPECIALIZATION_ID""
              ACTION_MARKING_ID""BANKS_ID""CITY_ID""COUNTRY_ID""
              ATTRACTION_ID" */
    SELECT count(*) INTO NUMROWS
      FROM BANK_ROBBERY
      WHERE
        /* %JoinFKPK(:%New,BANK_ROBBERY," = "," AND") */
        :new.BANK_ROBBERY_ID = BANK_ROBBERY.BANK_ROBBERY_ID AND
        :new.GANG_LINEUP_ID = BANK_ROBBERY.GANG_LINEUP_ID AND
        :new.STATUS_ID = BANK_ROBBERY.STATUS_ID AND
        :new.SPECIALIZATION_ID = BANK_ROBBERY.SPECIALIZATION_ID AND
        :new.ACTION_MARKING_ID = BANK_ROBBERY.ACTION_MARKING_ID AND
        :new.BANKS_ID = BANK_ROBBERY.BANKS_ID AND
        :new.CITY_ID = BANK_ROBBERY.CITY_ID AND
        :new.COUNTRY_ID = BANK_ROBBERY.COUNTRY_ID AND
        :new.ATTRACTION_ID = BANK_ROBBERY.ATTRACTION_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert ROBBERY_RESULT because BANK_ROBBERY does not exist.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_ROBBERY_RESULT AFTER UPDATE ON ROBBERY_RESULT for each row
-- erwin Builtin Trigger
-- UPDATE trigger on ROBBERY_RESULT 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ROBBERY_RESULT  KILLING on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="000521c8", PARENT_OWNER="", PARENT_TABLE="ROBBERY_RESULT"
    CHILD_OWNER="", CHILD_TABLE="KILLING"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_8", FK_COLUMNS="ROBBERY_RESULT_ID""BANK_ROBBERY_ID""GANG_LINEUP_ID""STATUS_ID""
              SPECIALIZATION_ID""ACTION_MARKING_ID""BANKS_ID""CITY_ID""
              COUNTRY_ID""ATTRACTION_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ROBBERY_RESULT_ID <> :new.ROBBERY_RESULT_ID OR 
    :old.BANK_ROBBERY_ID <> :new.BANK_ROBBERY_ID OR 
    :old.GANG_LINEUP_ID <> :new.GANG_LINEUP_ID OR 
    :old.STATUS_ID <> :new.STATUS_ID OR 
    :old.SPECIALIZATION_ID <> :new.SPECIALIZATION_ID OR 
    :old.ACTION_MARKING_ID <> :new.ACTION_MARKING_ID OR 
    :old.BANKS_ID <> :new.BANKS_ID OR 
    :old.CITY_ID <> :new.CITY_ID OR 
    :old.COUNTRY_ID <> :new.COUNTRY_ID OR 
    :old.ATTRACTION_ID <> :new.ATTRACTION_ID
  THEN
    UPDATE KILLING
      SET
        /* %SetFK(KILLING,NULL) */
        KILLING.ROBBERY_RESULT_ID = NULL,
        KILLING.BANK_ROBBERY_ID = NULL,
        KILLING.GANG_LINEUP_ID = NULL,
        KILLING.STATUS_ID = NULL,
        KILLING.SPECIALIZATION_ID = NULL,
        KILLING.ACTION_MARKING_ID = NULL,
        KILLING.BANKS_ID = NULL,
        KILLING.CITY_ID = NULL,
        KILLING.COUNTRY_ID = NULL,
        KILLING.ATTRACTION_ID = NULL
      WHERE
        /* %JoinFKPK(KILLING,:%Old," = ",",") */
        KILLING.ROBBERY_RESULT_ID = :old.ROBBERY_RESULT_ID AND
        KILLING.BANK_ROBBERY_ID = :old.BANK_ROBBERY_ID AND
        KILLING.GANG_LINEUP_ID = :old.GANG_LINEUP_ID AND
        KILLING.STATUS_ID = :old.STATUS_ID AND
        KILLING.SPECIALIZATION_ID = :old.SPECIALIZATION_ID AND
        KILLING.ACTION_MARKING_ID = :old.ACTION_MARKING_ID AND
        KILLING.BANKS_ID = :old.BANKS_ID AND
        KILLING.CITY_ID = :old.CITY_ID AND
        KILLING.COUNTRY_ID = :old.COUNTRY_ID AND
        KILLING.ATTRACTION_ID = :old.ATTRACTION_ID;
  END IF;

  /* erwin Builtin Trigger */
  /* BANK_ROBBERY  ROBBERY_RESULT on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BANK_ROBBERY"
    CHILD_OWNER="", CHILD_TABLE="ROBBERY_RESULT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_7", FK_COLUMNS="BANK_ROBBERY_ID""GANG_LINEUP_ID""STATUS_ID""SPECIALIZATION_ID""
              ACTION_MARKING_ID""BANKS_ID""CITY_ID""COUNTRY_ID""
              ATTRACTION_ID" */
  SELECT count(*) INTO NUMROWS
    FROM BANK_ROBBERY
    WHERE
      /* %JoinFKPK(:%New,BANK_ROBBERY," = "," AND") */
      :new.BANK_ROBBERY_ID = BANK_ROBBERY.BANK_ROBBERY_ID AND
      :new.GANG_LINEUP_ID = BANK_ROBBERY.GANG_LINEUP_ID AND
      :new.STATUS_ID = BANK_ROBBERY.STATUS_ID AND
      :new.SPECIALIZATION_ID = BANK_ROBBERY.SPECIALIZATION_ID AND
      :new.ACTION_MARKING_ID = BANK_ROBBERY.ACTION_MARKING_ID AND
      :new.BANKS_ID = BANK_ROBBERY.BANKS_ID AND
      :new.CITY_ID = BANK_ROBBERY.CITY_ID AND
      :new.COUNTRY_ID = BANK_ROBBERY.COUNTRY_ID AND
      :new.ATTRACTION_ID = BANK_ROBBERY.ATTRACTION_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update ROBBERY_RESULT because BANK_ROBBERY does not exist.'
    );
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_KILLING BEFORE INSERT ON KILLING for each row
-- erwin Builtin Trigger
-- INSERT trigger on KILLING 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* ROBBERY_RESULT  KILLING on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00029daf", PARENT_OWNER="", PARENT_TABLE="ROBBERY_RESULT"
    CHILD_OWNER="", CHILD_TABLE="KILLING"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_8", FK_COLUMNS="ROBBERY_RESULT_ID""BANK_ROBBERY_ID""GANG_LINEUP_ID""STATUS_ID""
              SPECIALIZATION_ID""ACTION_MARKING_ID""BANKS_ID""CITY_ID""
              COUNTRY_ID""ATTRACTION_ID" */
    UPDATE KILLING
      SET
        /* %SetFK(KILLING,NULL) */
        KILLING.ROBBERY_RESULT_ID = NULL,
        KILLING.BANK_ROBBERY_ID = NULL,
        KILLING.GANG_LINEUP_ID = NULL,
        KILLING.STATUS_ID = NULL,
        KILLING.SPECIALIZATION_ID = NULL,
        KILLING.ACTION_MARKING_ID = NULL,
        KILLING.BANKS_ID = NULL,
        KILLING.CITY_ID = NULL,
        KILLING.COUNTRY_ID = NULL,
        KILLING.ATTRACTION_ID = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM ROBBERY_RESULT
            WHERE
              /* %JoinFKPK(:%New,ROBBERY_RESULT," = "," AND") */
              :new.ROBBERY_RESULT_ID = ROBBERY_RESULT.ROBBERY_RESULT_ID AND
              :new.BANK_ROBBERY_ID = ROBBERY_RESULT.BANK_ROBBERY_ID AND
              :new.GANG_LINEUP_ID = ROBBERY_RESULT.GANG_LINEUP_ID AND
              :new.STATUS_ID = ROBBERY_RESULT.STATUS_ID AND
              :new.SPECIALIZATION_ID = ROBBERY_RESULT.SPECIALIZATION_ID AND
              :new.ACTION_MARKING_ID = ROBBERY_RESULT.ACTION_MARKING_ID AND
              :new.BANKS_ID = ROBBERY_RESULT.BANKS_ID AND
              :new.CITY_ID = ROBBERY_RESULT.CITY_ID AND
              :new.COUNTRY_ID = ROBBERY_RESULT.COUNTRY_ID AND
              :new.ATTRACTION_ID = ROBBERY_RESULT.ATTRACTION_ID
        ) 
        /* %JoinPKPK(KILLING,:%New," = "," AND") */
         and KILLING.KILLING_ID = :new.KILLING_ID;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_KILLING AFTER UPDATE ON KILLING for each row
-- erwin Builtin Trigger
-- UPDATE trigger on KILLING 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* ROBBERY_RESULT  KILLING on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0002b12a", PARENT_OWNER="", PARENT_TABLE="ROBBERY_RESULT"
    CHILD_OWNER="", CHILD_TABLE="KILLING"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_8", FK_COLUMNS="ROBBERY_RESULT_ID""BANK_ROBBERY_ID""GANG_LINEUP_ID""STATUS_ID""
              SPECIALIZATION_ID""ACTION_MARKING_ID""BANKS_ID""CITY_ID""
              COUNTRY_ID""ATTRACTION_ID" */
  SELECT count(*) INTO NUMROWS
    FROM ROBBERY_RESULT
    WHERE
      /* %JoinFKPK(:%New,ROBBERY_RESULT," = "," AND") */
      :new.ROBBERY_RESULT_ID = ROBBERY_RESULT.ROBBERY_RESULT_ID AND
      :new.BANK_ROBBERY_ID = ROBBERY_RESULT.BANK_ROBBERY_ID AND
      :new.GANG_LINEUP_ID = ROBBERY_RESULT.GANG_LINEUP_ID AND
      :new.STATUS_ID = ROBBERY_RESULT.STATUS_ID AND
      :new.SPECIALIZATION_ID = ROBBERY_RESULT.SPECIALIZATION_ID AND
      :new.ACTION_MARKING_ID = ROBBERY_RESULT.ACTION_MARKING_ID AND
      :new.BANKS_ID = ROBBERY_RESULT.BANKS_ID AND
      :new.CITY_ID = ROBBERY_RESULT.CITY_ID AND
      :new.COUNTRY_ID = ROBBERY_RESULT.COUNTRY_ID AND
      :new.ATTRACTION_ID = ROBBERY_RESULT.ATTRACTION_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    :new.ROBBERY_RESULT_ID IS NOT NULL AND
    :new.BANK_ROBBERY_ID IS NOT NULL AND
    :new.GANG_LINEUP_ID IS NOT NULL AND
    :new.STATUS_ID IS NOT NULL AND
    :new.SPECIALIZATION_ID IS NOT NULL AND
    :new.ACTION_MARKING_ID IS NOT NULL AND
    :new.BANKS_ID IS NOT NULL AND
    :new.CITY_ID IS NOT NULL AND
    :new.COUNTRY_ID IS NOT NULL AND
    :new.ATTRACTION_ID IS NOT NULL AND
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update KILLING because ROBBERY_RESULT does not exist.'
    );
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_SECURITY_LEVEL BEFORE INSERT ON SECURITY_LEVEL for each row
-- erwin Builtin Trigger
-- INSERT trigger on SECURITY_LEVEL 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* ATTRACTION  SECURITY_LEVEL on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0000fc12", PARENT_OWNER="", PARENT_TABLE="ATTRACTION"
    CHILD_OWNER="", CHILD_TABLE="SECURITY_LEVEL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_12", FK_COLUMNS="ATTRACTION_ID" */
    SELECT count(*) INTO NUMROWS
      FROM ATTRACTION
      WHERE
        /* %JoinFKPK(:%New,ATTRACTION," = "," AND") */
        :new.ATTRACTION_ID = ATTRACTION.ATTRACTION_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert SECURITY_LEVEL because ATTRACTION does not exist.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SECURITY_LEVEL AFTER UPDATE ON SECURITY_LEVEL for each row
-- erwin Builtin Trigger
-- UPDATE trigger on SECURITY_LEVEL 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* ATTRACTION  SECURITY_LEVEL on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00010309", PARENT_OWNER="", PARENT_TABLE="ATTRACTION"
    CHILD_OWNER="", CHILD_TABLE="SECURITY_LEVEL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_12", FK_COLUMNS="ATTRACTION_ID" */
  SELECT count(*) INTO NUMROWS
    FROM ATTRACTION
    WHERE
      /* %JoinFKPK(:%New,ATTRACTION," = "," AND") */
      :new.ATTRACTION_ID = ATTRACTION.ATTRACTION_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update SECURITY_LEVEL because ATTRACTION does not exist.'
    );
  END IF;


-- erwin Builtin Trigger
END;
/

